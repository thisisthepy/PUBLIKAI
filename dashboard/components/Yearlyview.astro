---
import agedHomesData from './data/agedHomes.json';
import satisfactionData from './data/satisfaction.json';
import renewedHomesData from './data/renewedHomes.json';

const availableYears = Object.keys(agedHomesData.agedHomes).sort((a,b)=>b.localeCompare(a));
---


<section class="wrap">
  <h1>노후 주택 재생 대시보드</h1>

  <div class="grid">
    <!-- 1행: 전폭 라인 -->
    <article class="card wide">
      <header class="card__header">
        <h2 id="agedHomesTitle">노후화 주택 현황</h2>
        <div id="agedHomesToggle" class="toggle">
          <button data-view="yearly" class="active">연간</button>
          {availableYears.map(y => <button data-view={y}>{y}</button>)}
        </div>
      </header>
      <div class="chart"><canvas id="agedHomesChart"></canvas></div>
    </article>

    <!-- 2행 좌: 파이 -->
    <article class="card">
      <header class="card__header">
        <h2 id="satisfactionTitle">시민 만족도</h2>
        <div id="satisfactionToggle" class="toggle">
          <button data-view="yearly" class="active">연간</button>
          {availableYears.map(y => <button data-view={y}>{y}</button>)}
        </div>
      </header>
      <div class="chart"><canvas id="satisfactionChart"></canvas></div>
    </article>

    <!-- 2행 우: 막대 -->
    <article class="card">
      <header class="card__header">
        <h2 id="renewedHomesTitle">재생 완료 주택</h2>
        <div id="renewedHomesToggle" class="toggle">
          <button data-view="yearly" class="active">연간</button>
          {availableYears.map(y => <button data-view={y}>{y}</button>)}
        </div>
      </header>
      <div class="chart"><canvas id="renewedHomesChart"></canvas></div>
    </article>
  </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script is:inline define:vars={{ agedHomesData, satisfactionData, renewedHomesData, availableYears }}>
  // ===== 공통 팔레트(월별 분석과 통일) =====
  const COLOR = {
    blue: '#60a5fa',
    pink: '#fb7185',
    orange: '#fbbf24',
    gray: '#94a3b8'
  };

  // ===== 상태 =====
  let agedHomesChart, satisfactionChart, renewedHomesChart;
  const state = { agedHomes: 'yearly', satisfaction: 'yearly', renewedHomes: 'yearly' };

  // ===== 변환 =====
  // ===== 변환 =====
// ⬇️ 이 함수만 기존 것을 교체
function transformAgedHomesData(data, view) {
  const labelsMap = { total: '전체', reported: '신고', inspected: '점검', resolved: '조치 완료' };
  // 순서도 고정(전체 → 신고 → 점검 → 완료)
  const keys = ['total', 'reported', 'inspected', 'resolved'];
  const colorMap = {
    total:   COLOR.gray,   // 중립
    reported:COLOR.orange, // 이슈
    inspected:COLOR.pink,  // 진행
    resolved:COLOR.blue    // 완료
  };

  if (view !== 'yearly') {
    const year = data.agedHomes[view] || {};
    const months = Object.keys(year);
    const datasets = keys.map(k => ({
      label: labelsMap[k],
      data: months.map(m => year[m]?.[k] ?? 0),
      borderColor: colorMap[k],
      backgroundColor: colorMap[k],
      tension: .2,
      fill: false,
      pointRadius: 0,
      borderWidth: 2
    }));
    return { labels: months, datasets };
  } else {
    const years = Object.keys(data.agedHomes).sort();
    const datasets = keys.map(k => ({
      label: labelsMap[k],
      data: years.map(y =>
        Object.values(data.agedHomes[y]).reduce((s, m) => s + (m[k] ?? 0), 0)
      ),
      borderColor: colorMap[k],
      backgroundColor: colorMap[k],
      tension: .2,
      fill: false,
      pointRadius: 0,
      borderWidth: 2
    }));
    return { labels: years, datasets };
  }
}

  function transformSatisfactionData(data, view) {
    const labels = ['긍정','부정','중립'];
    const bg = [COLOR.blue, COLOR.pink, COLOR.gray];
    if (view !== 'yearly') {
      const year = data.satisfaction[view] || {};
      const months = Object.keys(year);
      const sum = months.reduce((a,m)=>({
        like:a.like+(year[m]?.like||0),
        dislike:a.dislike+(year[m]?.dislike||0),
        neutral:a.neutral+(year[m]?.neutral||0)
      }),{like:0,dislike:0,neutral:0});
      const avg = months.length ? [sum.like, sum.dislike, sum.neutral].map(v=>Math.round(v/months.length)) : [0,0,0];
      return { labels, datasets:[{ data: avg, backgroundColor:bg }] };
    } else {
      const all = Object.values(data.satisfaction).flatMap(y=>Object.values(y));
      const sum = all.reduce((a,m)=>({
        like:a.like+(m?.like||0),dislike:a.dislike+(m?.dislike||0),neutral:a.neutral+(m?.neutral||0)
      }),{like:0,dislike:0,neutral:0});
      const avg = all.length ? [sum.like,sum.dislike,sum.neutral].map(v=>Math.round(v/all.length)) : [0,0,0];
      return { labels, datasets:[{ data: avg, backgroundColor:bg }] };
    }
  }

  function transformRenewedHomesData(data, view) {
    // 막대: 유형별 누적(파랑 하나로 통일)
    if (view !== 'yearly') {
      const year = data.renewedHomes[view] || {};
      const totals = {};
      Object.values(year).forEach(m=>{ for (const [k,v] of Object.entries(m)) totals[k]=(totals[k]||0)+v; });
      const labels = Object.keys(totals);
      return { labels, datasets:[{ label:`${view}년`, data: labels.map(k=>totals[k]), backgroundColor: COLOR.blue }] };
    } else {
      const years = Object.keys(data.renewedHomes).sort();
      const types = [...new Set(years.flatMap(y => Object.values(data.renewedHomes[y]).flatMap(m => Object.keys(m))))];
      const dataPerType = types.map(t => years.reduce((s,y)=>{
        const yearTotals = Object.values(renewedHomesData.renewedHomes[y]).reduce((acc,m)=>acc+(m[t]||0),0);
        return s+yearTotals;
      },0));
      return { labels: types, datasets:[{ label:'연간', data: dataPerType, backgroundColor: COLOR.blue }] };
    }
  }

  // ===== 렌더 =====
  function renderAgedHomes(){
    const v = state.agedHomes;
    const data = transformAgedHomesData(agedHomesData, v);
    document.getElementById('agedHomesTitle').textContent = `노후화 주택 현황 (${v==='yearly'?'연간':v+'년'})`;
    const el = document.getElementById('agedHomesChart');
    if (agedHomesChart) { agedHomesChart.data = data; agedHomesChart.update(); }
    else {
      agedHomesChart = new Chart(el, {
        type:'line', data,
        options:{
          responsive:true, maintainAspectRatio:false,
          plugins:{ legend:{ position:'top' } },
          scales:{
            x:{ grid:{ display:false } },
            y:{ beginAtZero:true, grid:{ color:'rgba(148,163,184,.2)' } }
          }
        }
      });
    }
  }

  function renderSatisfaction(){
    const v = state.satisfaction;
    const data = transformSatisfactionData(satisfactionData, v);
    document.getElementById('satisfactionTitle').textContent = `시민 만족도 (${v==='yearly'?'연간 종합':v+'년 평균'})`;
    const el = document.getElementById('satisfactionChart');
    if (satisfactionChart) { satisfactionChart.data = data; satisfactionChart.update(); }
    else {
      satisfactionChart = new Chart(el, {
        type:'pie', data,
        options:{
          responsive:true, maintainAspectRatio:false,
          plugins:{ legend:{ position:'bottom' } }
        }
      });
    }
  }

  function renderRenewed(){
    const v = state.renewedHomes;
    const data = transformRenewedHomesData(renewedHomesData, v);
    document.getElementById('renewedHomesTitle').textContent = `재생 완료 주택 (${v==='yearly'?'연간':v+'년 누적'})`;
    const el = document.getElementById('renewedHomesChart');
    if (renewedHomesChart) { renewedHomesChart.data = data; renewedHomesChart.update(); }
    else {
      renewedHomesChart = new Chart(el, {
        type:'bar', data,
        options:{
          responsive:true, maintainAspectRatio:false,
          plugins:{ legend:{ display:false } },
          scales:{
            x:{ grid:{ display:false } },
            y:{ beginAtZero:true, grid:{ color:'rgba(148,163,184,.2)' } }
          }
        }
      });
    }
  }

  // ===== 토글 =====
  function setupToggle(id, key, onUpdate){
    const el = document.getElementById(id);
    el.addEventListener('click', (e)=>{
      if (e.target.tagName !== 'BUTTON') return;
      el.querySelector('.active')?.classList.remove('active');
      e.target.classList.add('active');
      state[key] = e.target.dataset.view;
      onUpdate();
    });
  }

  document.addEventListener('DOMContentLoaded', ()=>{
    setupToggle('agedHomesToggle','agedHomes',renderAgedHomes);
    setupToggle('satisfactionToggle','satisfaction',renderSatisfaction);
    setupToggle('renewedHomesToggle','renewedHomes',renderRenewed);

    renderAgedHomes(); renderSatisfaction(); renderRenewed();
  });
</script>

<style>
  :root{
    --bg:#f4f7f6;
    --card:#ffffff;
    --border:rgba(0,0,0,.06);
    --text:#111827;
    --muted:#6b7280;
    --blue:#60a5fa; --pink:#fb7185; --orange:#fbbf24; --gray:#94a3b8;
  }
  @media (prefers-color-scheme: dark){
    :root{ --bg:#0f1115; --card:#121417; --border:rgba(255,255,255,.08); --text:#e5e7eb; --muted:#a1a1aa; }
  }

  .wrap{ max-width: 1100px; margin:0 auto; padding: 12px 16px 28px; }
  h1{ margin:10px 0 18px; font-size:26px; color:var(--text); }

  .grid{ display:grid; grid-template-columns:repeat(2,minmax(0,1fr)); gap:16px; }
  .card{
    background:var(--card); border:1px solid var(--border);
    border-radius:16px; padding:14px 16px;
  }
  .card.wide{ grid-column:span 2; }
  .card__header{ display:flex; align-items:center; justify-content:space-between; gap:8px; margin-bottom:8px; }
  .card__header h2{ margin:0; font-size:18px; }

  .toggle{ display:flex; flex-wrap:wrap; gap:0; }
  .toggle button{
    padding:6px 10px; font-size:13px; border:1px solid var(--border);
    background:#f8fafc; color:#0f172a; cursor:pointer;
  }
  .toggle button + button{ border-left:0; }
  .toggle button:first-child{ border-radius:8px 0 0 8px; }
  .toggle button:last-child{ border-radius:0 8px 8px 0; }
  .toggle button.active{ background:var(--blue); color:#fff; border-color:var(--blue); }

  .chart{ height:260px; }
  canvas{ width:100% !important; height:100% !important; }

  body{ background:var(--bg); }
  *{ font-family:'Pretendard',system-ui,Segoe UI,Apple SD Gothic Neo,Arial,sans-serif; }
  
  @media (max-width:1024px){
    .grid{ grid-template-columns:1fr; }
    .card.wide{ grid-column:span 1; }
  }
</style>

---
// Frontmatter 부분은 이전과 동일합니다.
import agedHomesData from './data/agedHomes.json';
import satisfactionData from './data/satisfaction.json';
import renewedHomesData from './data/renewedHomes.json';

const availableYears = Object.keys(agedHomesData.agedHomes).sort((a, b) => b.localeCompare(a));
---

<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>천안시 노후 주택 재생 프로젝트 현황</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { font-family: 'Pretendard', sans-serif; background-color: #f4f7f6; color: #333; display: flex; flex-direction: column; align-items: center; padding: 2rem; margin: 0; }
        h1 { color: #2c3e50; text-align: center; margin-bottom: 2rem; }
        .chart-container { width: 100%; max-width: 800px; background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); padding: 1.5rem; margin-bottom: 2rem; }
        .chart-header { display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 1rem; }
        h2 { font-size: 1.5rem; color: #34495e; border-bottom: 2px solid #eeeeee; padding-bottom: 0.5rem; margin-top: 0; flex-grow: 1; }
        .view-toggle { display: flex; flex-wrap: wrap; }
        .view-toggle button { padding: 0.5rem 1rem; border: 1px solid #ddd; background-color: #f9f9f9; cursor: pointer; font-size: 0.9rem; transition: background-color 0.2s, color 0.2s; }
        .view-toggle button:first-of-type { border-radius: 5px 0 0 5px; }
        .view-toggle button:last-of-type { border-radius: 0 5px 5px 0; }
        .view-toggle button:not(:last-child) { border-right: none; }
        .view-toggle button.active { background-color: #3498db; color: white; border-color: #3498db; }
    </style>
</head>
<body>
    <h1>천안시 노후 주택 재생 프로젝트 현황 🏘️</h1>

    <div class="chart-container">
        <div class="chart-header">
            <h2 id="agedHomesTitle"></h2>
            <div id="agedHomesToggle" class="view-toggle">
                <button data-view="yearly" class="active">연간</button>
                {availableYears.map(year => <button data-view={year}>{year}</button>)}
            </div>
        </div>
        <canvas id="agedHomesChart"></canvas>
    </div>

    <div class="chart-container">
        <div class="chart-header">
            <h2 id="satisfactionTitle"></h2>
            <div id="satisfactionToggle" class="view-toggle">
                <button data-view="yearly" class="active">연간</button>
                {availableYears.map(year => <button data-view={year}>{year}</button>)}
            </div>
        </div>
        <canvas id="satisfactionChart"></canvas>
    </div>

    <div class="chart-container">
        <div class="chart-header">
            <h2 id="renewedHomesTitle"></h2>
            <div id="renewedHomesToggle" class="view-toggle">
                <button data-view="yearly" class="active">연간</button>
                {availableYears.map(year => <button data-view={year}>{year}</button>)}
            </div>
        </div>
        <canvas id="renewedHomesChart"></canvas>
    </div>

    <script define:vars={{ agedHomesData, satisfactionData, renewedHomesData, availableYears }}>
        // --- 전역 변수 및 인스턴스 ---
        let agedHomesChart, satisfactionChart, renewedHomesChart;

        const chartStates = {
            agedHomes: { view: 'yearly' },
            satisfaction: { view: 'yearly' },
            renewedHomes: { view: 'yearly' }
        };
        
        // --- 데이터 변환 함수들은 이전과 동일 (맨 아래에 첨부) ---
        function transformAgedHomesData(data, view) { /* ... */ }
        function transformSatisfactionData(data, view) { /* ... */ }
        function transformRenewedHomesData(data, view) { /* ... */ }

        // --- 💡 그래프별 개별 업데이트 함수 생성 ---
        function updateAgedHomesChart() {
            const view = chartStates.agedHomes.view;
            const data = transformAgedHomesData(agedHomesData, view);
            document.getElementById('agedHomesTitle').innerText = `📈 노후화 주택 현황 (${view === 'yearly' ? '연간' : view + '년'})`;
            if (agedHomesChart) { agedHomesChart.data = data; agedHomesChart.update(); } 
            else { agedHomesChart = new Chart(document.getElementById('agedHomesChart'), { type: 'line', data, options: { responsive: true, plugins: { legend: { position: 'top' } } } }); }
        }

        function updateSatisfactionChart() {
            const view = chartStates.satisfaction.view;
            const data = transformSatisfactionData(satisfactionData, view);
            document.getElementById('satisfactionTitle').innerText = `😊 시민 만족도 (${view === 'yearly' ? '연간 종합' : view + '년 평균'})`;
            if (satisfactionChart) { satisfactionChart.data = data; satisfactionChart.update(); } 
            else { satisfactionChart = new Chart(document.getElementById('satisfactionChart'), { type: 'pie', data, options: { responsive: true, plugins: { legend: { position: 'top' } } } }); }
        }

        function updateRenewedHomesChart() {
            const view = chartStates.renewedHomes.view;
            const data = transformRenewedHomesData(renewedHomesData, view);
            document.getElementById('renewedHomesTitle').innerText = `🏠 재생 완료 주택 현황 (${view === 'yearly' ? '연간' : view + '년 누적'})`;
            if (renewedHomesChart) { renewedHomesChart.data = data; renewedHomesChart.update(); } 
            else { renewedHomesChart = new Chart(document.getElementById('renewedHomesChart'), { type: 'bar', data, options: { responsive: true, scales: { y: { beginAtZero: true } }, plugins: { legend: { display: false } } } }); }
        }
        
        // --- 이벤트 리스너 설정 함수 ---
        // 💡 각 차트에 맞는 업데이트 함수를 호출하도록 수정
        function setupEventListeners(chartId, toggleId) {
            const toggleContainer = document.getElementById(toggleId);
            const updaters = {
                agedHomes: updateAgedHomesChart,
                satisfaction: updateSatisfactionChart,
                renewedHomes: updateRenewedHomesChart
            };

            toggleContainer.addEventListener('click', (e) => {
                if (e.target.tagName === 'BUTTON') {
                    const newView = e.target.dataset.view;
                    chartStates[chartId].view = newView;

                    toggleContainer.querySelector('.active').classList.remove('active');
                    e.target.classList.add('active');

                    // 💡 해당 차트의 업데이트 함수만 정확히 호출
                    updaters[chartId]();
                }
            });
        }

        // --- 최초 실행 ---
        window.addEventListener('DOMContentLoaded', () => {
            setupEventListeners('agedHomes', 'agedHomesToggle');
            setupEventListeners('satisfaction', 'satisfactionToggle');
            setupEventListeners('renewedHomes', 'renewedHomesToggle');
            
            // 💡 최초 로딩 시, 각 차트를 한 번씩 그려줍니다.
            updateAgedHomesChart();
            updateSatisfactionChart();
            updateRenewedHomesChart();
        });

        // --- 데이터 변환 함수들 (참고용) ---
        function transformAgedHomesData(data, view) {const KOR_LABELS = { total: "Total (전체)", reported: "Reported (신고)", inspected: "Inspected (점검)", resolved: "Resolved (조치 완료)" };const COLORS = ['#3498db', '#f1c40f', '#e67e22', '#2ecc71']; const keys = ["total", "reported", "inspected", "resolved"]; if (view !== 'yearly') {const yearData = data.agedHomes[view] || {}; const labels = Object.keys(yearData); const datasets = keys.map((key, index) => ({ label: KOR_LABELS[key], data: labels.map(month => yearData[month][key] || 0), borderColor: COLORS[index], tension: 0.1, fill: false, })); return { labels, datasets };} else {const allYears = Object.keys(data.agedHomes).sort(); const datasets = keys.map((key, index) => ({ label: KOR_LABELS[key], data: allYears.map(yr => Object.values(data.agedHomes[yr]).reduce((sum, monthData) => sum + (monthData[key] || 0), 0)), borderColor: COLORS[index], tension: 0.1, fill: false, })); return { labels: allYears, datasets };}}
        function transformSatisfactionData(data, view) {const labels = ['긍정 (Like)', '부정 (Dislike)', '중립 (Neutral)']; const backgroundColor = ['#2ecc71', '#e74c3c', '#95a5a6']; if (view !== 'yearly') {const yearData = data.satisfaction[view] || {}; const months = Object.keys(yearData); if (months.length === 0) return { labels: [], datasets: [] }; const total = { like: 0, dislike: 0, neutral: 0 }; months.forEach(month => { total.like += yearData[month].like; total.dislike += yearData[month].dislike; total.neutral += yearData[month].neutral; }); const datasets = [{ data: [total.like / months.length, total.dislike / months.length, total.neutral / months.length], backgroundColor, hoverOffset: 4, }]; return { labels, datasets };} else {const allData = Object.values(data.satisfaction).flatMap(year => Object.values(year)); if (allData.length === 0) return { labels: [], datasets: [] }; const total = { like: 0, dislike: 0, neutral: 0 }; allData.forEach(month => { total.like += month.like; total.dislike += month.dislike; total.neutral += month.neutral; }); const datasets = [{ data: [total.like / allData.length, total.dislike / allData.length, total.neutral / allData.length], backgroundColor, hoverOffset: 4, }]; return { labels, datasets };}}
        function transformRenewedHomesData(data, view) {if (view !== 'yearly') {const yearData = data.renewedHomes[view] || {}; if (Object.keys(yearData).length === 0) return { labels: [], datasets: [] }; const totals = {}; Object.values(yearData).forEach(monthData => { for (const [key, value] of Object.entries(monthData)) { totals[key] = (totals[key] || 0) + value; } }); const labels = Object.keys(totals); const datasets = [{ label: `${view}년 누적 완료`, data: Object.values(totals), backgroundColor: ['rgba(54, 162, 235, 0.7)', 'rgba(255, 99, 132, 0.7)', 'rgba(75, 192, 192, 0.7)', 'rgba(255, 206, 86, 0.7)', 'rgba(153, 102, 255, 0.7)', 'rgba(255, 159, 64, 0.7)'], }]; return { labels, datasets };} else {const allYears = Object.keys(data.renewedHomes).sort(); const allTypes = [...new Set(allYears.flatMap(year => Object.values(data.renewedHomes[year]).flatMap(month => Object.keys(month))))]; const datasets = allYears.map(year => { const yearTotals = {}; Object.values(data.renewedHomes[year]).forEach(monthData => { for (const [type, count] of Object.entries(monthData)) { yearTotals[type] = (yearTotals[type] || 0) + count; } }); return { label: `${year}년`, data: allTypes.map(type => yearTotals[type] || 0), backgroundColor: `rgba(${Math.floor(Math.random()*150+50)}, ${Math.floor(Math.random()*150+50)}, ${Math.floor(Math.random()*150+50)}, 0.7)` }; }); return { labels: allTypes, datasets };}}
    </script>
</body>
</html>

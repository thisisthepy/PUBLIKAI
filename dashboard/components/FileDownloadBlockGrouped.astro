---
import { asset, url } from '../lib/data.js';
import { getPdfFilesByYear, getPdfFilesByYearFromAPI, type FileInfo } from '../lib/fileUtils';

interface Props {
	title: string;
	description?: string;
	groupByYear?: boolean;
}

const { title, description, groupByYear = true } = Astro.props;

// 연도별로 그룹화된 파일 목록 가져오기
let filesByYear: { [year: string]: FileInfo[] } = {};

try {
	// 빌드 환경 또는 프로덕션에서는 API 우선 시도
	if (import.meta.env.PROD || import.meta.env.MODE === 'production') {
		try {
			filesByYear = await getPdfFilesByYearFromAPI();
		} catch (apiError) {
			console.warn('API 실패, 직접 파일 시스템 접근 시도:', apiError);
			filesByYear = await getPdfFilesByYear();
		}
	} else {
		// 개발 환경에서는 직접 파일 시스템 접근
		filesByYear = await getPdfFilesByYear();
	}
} catch (error) {
	console.error('Error loading PDF files:', error);
}

// 연도 순서 정렬 (최신 먼저)
const sortedYears = Object.keys(filesByYear).sort((a, b) => {
	if (a === '기타') return 1;
	if (b === '기타') return -1;
	return parseInt(b) - parseInt(a);
});
---

<div class="space-y-6">
	<div>
		<h3 class="mb-2 text-xl font-bold text-gray-900 dark:text-white">
			{title}
		</h3>
		{description && (
			<p class="mb-4 text-sm text-gray-500 dark:text-gray-400">
				{description}
			</p>
		)}
	</div>
	
	{sortedYears.map((year) => (
		<div class="squircle-container">
			<div class="p-5">
				<h4 class="mb-3 text-lg font-semibold text-gray-900 dark:text-white flex items-center">
					<svg class="w-5 h-5 mr-2 text-blue-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
						<path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
					</svg>
					{year}
					<span class="squircle-badge ml-2 px-2 py-1 text-xs">
						{filesByYear[year].length}개 파일
					</span>
				</h4>
				
				<div class="space-y-3">
					{filesByYear[year].map((file) => (
						<div class="squircle-item flex items-center justify-between p-4">
							<div class="flex items-center space-x-3">
								<!-- PDF 아이콘 -->
								<div class="flex-shrink-0">
									<svg class="w-8 h-8 text-red-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
										<path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd"></path>
									</svg>
								</div>
								
								<div class="flex-1 min-w-0">
									<p class="text-sm font-medium text-gray-900 dark:text-white truncate not-prose">
										{file.name}
									</p>
									<div class="flex items-center space-x-2 text-xs text-gray-500 dark:text-gray-400">
										{file.type && (
											<span class="squircle-badge px-2 py-1">
												{file.type}
											</span>
										)}
										{file.size && (
											<span>{file.size}</span>
										)}
									</div>
								</div>
							</div>
							
							<!-- 다운로드 버튼 -->
							<a 
								href={file.url}
								download={file.name}
								class="squircle-button inline-flex items-center px-3 py-2 text-sm font-medium text-center text-gray-900 dark:text-gray-300 transition-all duration-200"
							>
								<svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
									<path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"></path>
								</svg>
								다운로드
							</a>
						</div>
					))}
				</div>
				
				<!-- 연도별 전체 다운로드 버튼 -->
				{filesByYear[year].length > 1 && (
					<div class="mt-4 pt-3 border-t border-gray-200 dark:border-gray-600">
						<button 
							type="button"
							class="squircle-button w-full inline-flex items-center justify-center px-4 py-2 text-sm font-medium text-center text-gray-900 dark:text-gray-300 transition-all duration-200"
							onclick={`downloadYearFiles('${year}')`}
						>
							<svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
								<path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
							</svg>
							{year} 전체 다운로드
						</button>
					</div>
				)}
			</div>
		</div>
	))}
</div>

<style>
	.squircle-container,
	.squircle-item,
	.squircle-badge,
	.squircle-button {
		background: paint(squircle);
		--squircle-fill: #ffffff;
		position: relative;
	}
	
	.squircle-container {
		--squircle-radius: 20px;
		--squircle-fill: #ffffff;
	}
	
	.squircle-item {
		--squircle-radius: 12px;
		--squircle-fill: #f9fafb;
	}
	
	.squircle-badge {
		--squircle-radius: 6px;
		--squircle-fill: #e5e7eb;
	}
	
	.squircle-button {
		--squircle-radius: 8px;
		--squircle-fill: #ffffff;
	}
	
	@media (prefers-color-scheme: dark) {
		.squircle-container {
			--squircle-fill: #1f2937;
		}
		
		.squircle-item {
			--squircle-fill: #374151;
		}
		
		.squircle-badge {
			--squircle-fill: #4b5563;
		}
		
		.squircle-button {
			--squircle-fill: #1f2937;
		}
	}
	
	:global(.dark) .squircle-container {
		--squircle-fill: #1f2937;
	}
	
	:global(.dark) .squircle-item {
		--squircle-fill: #374151;
	}
	
	:global(.dark) .squircle-badge {
		--squircle-fill: #4b5563;
	}
	
	:global(.dark) .squircle-button {
		--squircle-fill: #1f2937;
	}
	
	.squircle-item:hover {
		--squircle-fill: #f3f4f6;
		transform: translateY(-1px);
	}
	
	:global(.dark) .squircle-item:hover {
		--squircle-fill: #4b5563;
	}
	
	.squircle-button:hover {
		--squircle-fill: #f3f4f6;
		transform: translateY(-1px);
		color: #1f2937;
	}
	
	:global(.dark) .squircle-button:hover {
		--squircle-fill: #4b5563;
		color: #f9fafb;
	}
	
	@media (prefers-color-scheme: dark) {
		.squircle-container,
		.squircle-item,
		.squircle-badge,
		.squircle-button {
			background: var(--squircle-fill-dark);
		}
	}
	
	:global(.dark) .squircle-container,
	:global(.dark) .squircle-item,
	:global(.dark) .squircle-badge,
	:global(.dark) .squircle-button {
		background: var(--squircle-fill-dark);
	}
	
	.squircle-container {
	}
	
	:global(.dark) .squircle-container {
	}
	
	.squircle-item {
		transition: all 0.2s ease;
	}
	
	.squircle-item:hover {
		--squircle-fill: #f3f4f6;
		--squircle-fill-dark: #4b5563;
		transform: translateY(-1px);
	}
	
	:global(.dark) .squircle-item {
	}
	
	.squircle-button {
		transition: all 0.2s ease;
	}
	
	.squircle-button:hover {
		--squircle-fill: #f3f4f6;
		--squircle-fill-dark: #4b5563;
		transform: translateY(-1px);
		color: #1f2937;
	}
	
	:global(.dark) .squircle-button {
	}
	
	:global(.dark) .squircle-button:hover {
		color: #f9fafb;
	}
</style>

<script>
	interface FileInfo {
		name: string;
		url: string;
		size?: string;
		type?: string;
		year?: string;
	}

	function downloadYearFiles(year: string) {
		const yearSection = document.querySelector(`h4:contains("${year}")`);
		if (yearSection) {
			const container = yearSection.closest('.squircle-container');
			const fileLinks = container?.querySelectorAll('a[download]');
			fileLinks?.forEach((link, index) => {
				setTimeout(() => {
					(link as HTMLAnchorElement).click();
				}, index * 200); // 200ms 간격으로 다운로드
			});
		}
	}

	// 클라이언트 사이드에서 파일 목록 새로고침
	async function refreshFileList() {
		try {
			const response = await fetch('/api/pdf/files');
			if (!response.ok) {
				throw new Error(`API request failed: ${response.status}`);
			}
			
			const filesByYear: { [year: string]: FileInfo[] } = await response.json();
			
			// DOM 업데이트 로직 (필요시 구현)
			console.log('Updated file list:', filesByYear);
			
		} catch (error) {
			console.error('Error refreshing file list:', error);
		}
	}
	
	// 전역 함수로 등록
	(window as any).downloadYearFiles = downloadYearFiles;
	(window as any).refreshFileList = refreshFileList;
</script>
